#include <iostream>
using namespace std;

template <class T>
class LinkNode{
public:
    T data;
    LinkNode<T> *link;
    LinkNode(const T&el , LinkNode<T> * ptr = 0){
        data = el;
        link = ptr;
    }
};
        
template <class T>
class Queue{
public:
    void clear();
    bool EnQueue(const T item);
    bool DeQueue();
    bool isEmpty();
    bool isFull();
    T getFront(T & item);
};

template <class T>
class LinkQueue:public Queue<T>{
public:
    int size;
    LinkNode<T> *front;
    LinkNode<T> *rear;
    
    LinkQueue(int size){
        size = 0;
        front = rear = NULL;
    }
    
    ~LinkQueue(){
        clear();
    }
    
    void clear(){
        while(front != NULL){
            rear = front;
            front = front -> Link;
            delete rear;
        }
        rear = NULL;
        size = 0;
    }
    
    bool EnQueue(const T item){
        if(rear == NULL){
            front = rear = new LinkNode<T>(item , NULL);
        }else{
            rear -> next = new LinkNode<T>(item , NULL);            
            rear = rear -> next;
        }
        size ++;
        return true;
    }
    
    bool DeQueue(){
        LinkNode<T> * temp;
        if(size == 0) {
            cout << "队列为空" << endl;
            return false;
        }
        temp = front;
        front = front -> link;
        if(front == NULL){
            rear = NULL;
        }
        size --;
        return true;
    }
    
    bool getFront(T &item){
        if(size == 0){
            cout << "这是一个空的链式队列" << endl;
            return false;
        }
        item = front -> data;
        return true;
    }
};

int main(){


    return 0;
}
